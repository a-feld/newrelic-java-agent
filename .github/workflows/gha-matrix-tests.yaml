## Matrix strategy test
name: GHA Migration - strategy.matrix Tests

on:
  # pull_request:
  #   branches: [ main ]
  push:
    branches: [ testing ]

jobs:
  matrix_test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version: [9, 10, 11, 12, 13, 14, 15]
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1

      # GHA - configuring JDKs
      # The public action is setting the current $JAVA_HOME - confirmed

      # GHA - Variables to use in matrix (assumption is we can do this "in parallel":
      # $jdk_version (ORG_GRADLE_PROJECT_${jdk_version}), $JAVA_HOME
      # Matrix should :
      # 1. set up JDK
      # 2. set up $JAVA_HOME (if required? The action should do this with each matrix run)
      # 3. restore cache
      # 4. log project settings
      # 5. run the unit tests.

      # Need Java 8 for all tests
      - name: Set up Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 8

      # add jdk8 to environmental variables
      - name: save JAVA_HOME as JDK8 for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      # Concurrent install of all Java versions
      - name: Set up Java ${{ matrix.java-version }}
        uses: actions/setup-java@v1.4.3
        with:
          java-version: ${{ matrix.java-version }}

      - name: save JAVA_HOME as JDK${{ matrix.java-version }} for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk${{ matrix.java-version }}=$JAVA_HOME" >> $GITHUB_ENV

      # Check $JAVA_HOME
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}

      ## NEW CACHE FOR JDKS HERE
      ## So the hosted_tool_cache/jdk already has these versions.
      - name: Touch a file and saved to cached directory
        run: |
          pwd
          ls -la
          mkdir test-cache-dir
          touch test-cache-dir/ORG_GRADLE_PROJECT_jdk${{ matrix.java-version }}.txt
          ls -la
          cd test-cache-dir
          ls -la


      # Restore the gradle cache
      - name: Restore the gradle caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # The docs say to use hashfiles, but gradle itself is smart enough to
          # re-download dependencies if it couldn't resolve them.
          # Because our gradle cache is _so big_, I think a 90% cache is far
          # better than a 0% cache.
          key: ${{ runner.os }}-gradle
          restore-keys: |
            ${{ runner.os }}-gradle


      # GHA run unit tests and determine if both versions built prior are tested for.
      # Start running the build.
      - name: checking Java version and gradle functional_test tasks - no java version specified
        run: |
          whereis java
          pwd
          ls -la 
          java -version
          echo "The PATH variable is now set to " $PATH 
          ##./gradlew -Ptest${{ matrix.java-version }} --console=plain functional_test:tasks  ## Checking for module dependencies 
          ##./gradlew -Ptest9 --console=plain --parallel functional_test:test -PnoInstrumentation --continue --debug
          ## Testing in another way for a different Java version:
          ##echo "-Dorg.gradle.java.home= " ${JAVA_HOME}
          ##./gradlew --console=plain functional_test:tasks --info          
          ##./gradlew -Dorg.gradle.java.home=${ORG_GRADLE_PROJECT_jdk9} --console=plain --parallel functional_test:test -PnoInstrumentation --continue --info
        # run: ./gradlew -Ptest9 --console=plain --parallel functional_test:test --continue ## This command does NOT prevent instrumentation test from running.  Are they running by default?


      # Start running the build.
      - name: checking Java version and gradle functional_test tasks - testing with -Dorg.gradle.java.home
        run: |
          java -version
          ##./gradlew -Dorg.gradle.java.home=${JAVA_HOME} --console=plain functional_test:tasks --info          
          ##./gradlew -Dorg.gradle.java.home=${ORG_GRADLE_PROJECT_jdk9} --console=plain --parallel functional_test:test -PnoInstrumentation --continue --info
        # run: ./gradlew -Ptest9 --console=plain --parallel functional_test:test --continue ## This command does NOT prevent instrumentation test from running.  Are they running by default?


      # Start running the build.
      - name: checking Java version and gradle functional_test tasks - testing with PtestN
        run: |
          java -version
          ##./gradlew -Ptest${{ matrix.java-version }} --console=plain functional_test:tasks --info          
          ##./gradlew -Dorg.gradle.java.home=${ORG_GRADLE_PROJECT_jdk9} --console=plain --parallel functional_test:test -PnoInstrumentation --continue --info
        # run: ./gradlew -Ptest9 --console=plain --parallel functional_test:test --continue ## This command does NOT prevent instrumentation test from running.  Are they running by default?


  testing_job_dependence: ## ORG_GRADLE_PROJECT_jdk will have to be set for all versions
    needs: matrix_test
    runs-on: ubuntu-latest
    steps:
        
        # Restore the gradle cache
        - name: Restore the gradle caches
          uses: actions/cache@v2
          with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            # The docs say to use hashfiles, but gradle itself is smart enough to
            # re-download dependencies if it couldn't resolve them.
            # Because our gradle cache is _so big_, I think a 90% cache is far
            # better than a 0% cache.
            key: ${{ runner.os }}-gradle
            restore-keys: |
              ${{ runner.os }}-gradle

        - name: Check that all the Java versions are installed
          run: |
            pwd
            ls -la 
            whereis java


      # GHA checking gradle tasks, etc.
      # - name: Checking Gradle projects and tasks
      #   run: |
      #     ./gradlew projects
      #     ./gradlew tasks
