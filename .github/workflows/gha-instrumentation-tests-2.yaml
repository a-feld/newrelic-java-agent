## Matrix strategy test for instrumentaion testing
## Still need to configure AIT dependencies
name: GHA Instrumentation Tests 2

on:
  # pull_request:
  #   branches: [ gha-testing ] ## branches TBD
  #   types: [assigned, opened, synchronize, reopened] ## Types TBD
  push:
    branches: [ gha-testing ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  matrix_instrumentation_test:
    runs-on: ubuntu-latest
    strategy:
      ##max-parallel: 1 ## used to force sequential
      fail-fast: false
      matrix:
        java-version: [8, 9, 10, 11, 12, 13, 14, 15]
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1

      # Need Java 8 for all tests
      - name: Set up Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 8

      # add jdk8 to environmental variables
      - name: save JAVA_HOME as JDK8 for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      # Concurrent install of all Java versions
      - name: Set up Java ${{ matrix.java-version }}
        uses: actions/setup-java@v1.4.3
        with:
          java-version: ${{ matrix.java-version }}

      - name: save JAVA_HOME as JDK${{ matrix.java-version }} for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk${{ matrix.java-version }}=$JAVA_HOME" >> $GITHUB_ENV

      # Check $JAVA_HOME
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}

      ## Custom Cache Test
      - name: Touch a file and save to a cache directory
        run: |
          mkdir test-cache-dir
          touch test-cache-dir/ORG_GRADLE_PROJECT_jdk${{ matrix.java-version }}.txt
          ls -la
          cd test-cache-dir
          ls -la
          cd ../

      - name: Cache test directory
        uses: actions/cache@v2
        env:
          cache-name: cache-test-dir
        with:
          path: test-cache-dir
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.txt') }} ## Explore extensions to cache if no lock file
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Restore the gradle cache
      - name: Restore the gradle caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # The docs say to use hashfiles, but gradle itself is smart enough to
          # re-download dependencies if it couldn't resolve them.
          # Because our gradle cache is _so big_, I think a 90% cache is far
          # better than a 0% cache.
          key: ${{ runner.os }}-gradle
          restore-keys: |
            ${{ runner.os }}-gradle


      ## AWS jars - plan to cache
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Download S3 instrumentation jar zip
        run: aws s3 cp s3://nr-java-agent-s3-instrumentation/proprietary-jars-20200717.zip proprietary-jars.zip  ## 2020?

      - name: Unzip the instrumentation jars
        run: unzip proprietary-jars.zip

      - name: Log jars are in target libs
        run: find instrumentation -name "*.jar"
      ## End AWS jars - plan to cache (check for cache, restore if required)

      # GHA run instrumentation tests
      # Run the build.
      - name: Run instrumentation tests for each Java version as defined in the matrix
        run: |
          ./gradlew --console=plain instrumentation:test -Ptest${{ matrix.java-version }} --continue --info

      # Run the build. Disabled for now.  Testing only.
      - name: Run the tests with alternate Java version syntax - testing with -Dorg.gradle.java.home
        run: |
          ##./gradlew -Dorg.gradle.java.home=${ORG_GRADLE_PROJECT_jdk9} --console=plain instrumentation:test --continue --info

      # Capture HTML build result in artifacts
      - name: Capture build reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation-tests-results-${{ matrix.java-version }}
          path: |
            instrumentation/**/build/test-results/* 
            # path/output/test-results
            # !path/**/*.tmp


  testing_job_dependence: ## Testing Only
    # needs: matrix_instrumentation_test  ## Only runs after matrix_instrumentation_test runs
    runs-on: ubuntu-latest
    steps:
      # Print Environmental variables 
      - name: Print Environmental variables (verify activate has been sourced)
        run: |
          printenv    

      - name: Cache test directory
        uses: actions/cache@v2
        env:
          cache-name: cache-test-dir
        with:
          path: test-cache-dir
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      ## List cached items
      - name: List items in testing cached directory
        run: |
          cd test-cache-dir
          ls -la
          cd ../

      # Restore the gradle cache
      - name: Restore the gradle caches
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # The docs say to use hashfiles, but gradle itself is smart enough to
          # re-download dependencies if it couldn't resolve them.
          # Because our gradle cache is _so big_, I think a 90% cache is far
          # better than a 0% cache.
          key: ${{ runner.os }}-gradle
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Check that all the Java versions are installed
        run: |
          pwd
          ls -la 
          whereis java
