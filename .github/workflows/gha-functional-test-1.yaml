name: GHA Migration - PR Build  (using push for testing) - Functional Tests

on:
  # pull_request:
  #   branches: [ main ]
  push:
    branches: [ testing ]

jobs:
  unit_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1

      # GHA - configuring JDKs
      # The public action is setting the current $JAVA_HOME - confirmed

      # GHA - Variables to use in matrix (assumption is we can do this "in parallel":
      # $jdk_version (ORG_GRADLE_PROJECT_${jdk_version}), $JAVA_HOME
      # Matrix should :
      # 1. set up JDK
      # 2. set up $JAVA_HOME (if required? The action should do this with each matrix run)
      # 3. restore cache
      # 4. log project settings
      # 5. run the unit tests.

      # The first JDK set up gets to be "primary".
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 8
      # Check $JAVA_HOME
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}
      - name: save JAVA_HOME as JDK8 for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      # The second JDK is not first in the path but does reset JAVA_HOME
      - name: Set up JDK 1.7
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 7
      # Check $JAVA_HOME
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}
      - name: save JAVA_HOME as JDK7 for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk7=$JAVA_HOME" >> $GITHUB_ENV

      # ## NEW
      # GHA set up JDK 1.9
      - name: Set up JDK 1.9
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 9
      # Check $JAVA_HOME
      - name: Check "$JAVA_HOME"
        run: |
          echo "Current $JAVA_HOME = " ${JAVA_HOME}
      - name: save JAVA_HOME as JDK9 for later usage
        run: echo "ORG_GRADLE_PROJECT_jdk9=$JAVA_HOME" >> $GITHUB_ENV

      # GHA checking all available JDKs and paths
      # Java is installed; document settings
      - name: log project settings
        run: |
          echo "--- Java versions ---"
          $ORG_GRADLE_PROJECT_jdk7/bin/java -version
          $ORG_GRADLE_PROJECT_jdk8/bin/java -version
          $ORG_GRADLE_PROJECT_jdk9/bin/java -version

      # GHA Set the JDK to be used for the test
      - name: correct JAVA_HOME
        run: echo "JAVA_HOME=$ORG_GRADLE_PROJECT_jdk9" >> $GITHUB_ENV

      # Restore the gradle cache
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # The docs say to use hashfiles, but gradle itself is smart enough to
          # re-download dependencies if it couldn't resolve them.
          # Because our gradle cache is _so big_, I think a 90% cache is far
          # better than a 0% cache.
          key: ${{ runner.os }}-gradle
          restore-keys: |
            ${{ runner.os }}-gradle

      # GHA Testing
      - name: Check all environmental variables
        run: |
          printenv

      # GHA run unit tests and determine if both versions built prior are tested for.
      # Start running the build.
      - name: run the functional tests
        run: ./gradlew -Ptest9 --console=plain --parallel functional_test:test --continue

      # GHA checking gradle tasks, etc.
      # - name: Checking Gradle projects and tasks
      #   run: |
      #     ./gradlew projects
      #     ./gradlew tasks
